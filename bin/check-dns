#!/usr/bin/env bash
#
# check-dns: takes in a hostname or IP, resolves it to the other, then back again to 
#            verify that forward<->resolution looks right. 
#

###
### Variables
###
# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NORMAL='\033[0m' # No Color (renamed from NC to avoid confusion)
orig=
verbose=false
IFS='' read -r -d '' usage <<"EOF"

check-dns: forward<->reverse resolve a host or IP address

Usage:
  check-dns [ -h|--help ] 
  check-dns [ -v|--verbose ] <host|ip>

Arguments:
  -h|--help        Show what you are seeing right now
  -v|--verbose     Show the work being done

EOF


###
### Functions
###
print_status() {
    if [[ "$verbose" = true ]]; then
        echo -e "${GREEN}[STATUS]${NORMAL} $1" >&2
    fi
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NORMAL} $1" >&2
}

print_error() {
    echo -e "${RED}[ERROR]${NORMAL} $1" >&2
}


_host2ip () {

    print_status "looking up IP address with 'dig +search +noall +answer $1'"
    digresult=$( command dig +search +noall +answer $1 ) 
    if [ ! $? -eq 0 ]; then 
        print_error "cannot resolve $1" 
        exit 1
    fi
    echo $digresult | awk '{ print $5 }' 
   
}

_ip2host () {

    print_status "looking up hostname with 'dig +short -x $1'"
    digresult=$( command dig +short -x $1 ) 
    if [ ! $? -eq 0 ]; then 
        print_error "cannot resolve $1" 
        exit 1
    fi
    echo $digresult
   
}


###
### Process Args
###
while [[ $# -gt 0 ]]; do
   case $1 in
       -h|--help)
           echo "$usage" && exit 0
           ;;
       -v|--verbose)
           verbose=true
           ;;
      *)
           if [[ -z "$orig" ]]; then
               orig=$1
           else 
              print_error "superfluous option $1"
              echo "$usage" && exit 1
           fi
           ;;
   esac
   shift
done
# we need at least an argument
if [ -z "$orig" ]; then
    print_error "no argument given"
    exit 1
fi

# This should work for 99.9% of the times I'll use it
if [[ $orig =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
    ipaddr=$orig
    print_status "starting from IP address: $ipaddr"
    dnshost=$( _ip2host $ipaddr )
    if [ -z "$dnshost" ]; then
        print_error "failure converting $ipaddr to a hostname"
        exit 1
    fi
    print_status "dig returned $dnshost from $ipaddr"
    final=$( _host2ip $dnshost ) 
    if [ -z "$final" ]; then
        print_error "failure converting $dnshost to a IP address"
        exit 1
    fi
    echo "$ipaddr -> $dnshost -> $final" 
else
    dnshost=$orig
    print_status "starting from hostname: $dnshost"
    ipaddr=$( _host2ip $dnshost )
    if [ -z "$ipaddr" ]; then
        print_error "failure converting $dnshost to a IP address"
        exit 1
    fi
    print_status "dig returned $ipaddr from $dnshost"
    final=$( _ip2host $ipaddr ) 
    if [ -z "$final" ]; then
        print_error "failure converting $ipaddr to a hostname"
        exit 1
    fi
    echo "$dnshost -> $ipaddr -> $final" 
fi

