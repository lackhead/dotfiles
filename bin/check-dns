#!/usr/bin/env bash
#
# check-dns: takes in a hostname or IP, resolves it to the other, then back again to 
#            verify that forward<->resolution looks right. 
#

###
### Variables
###
orig=
IFS='' read -r -d '' usage <<"EOF"

check-dns: forward<->reverse resolve a host or IP address

Usage:
  check-dns [ -h|--help ] 
  check-dns <host|ip>

Arguments:
  -h|--help        Show what you are seeing right now

EOF


###
### Functions
###
_host2ip () {

    digresult=$( command dig +search +noall +answer $1 ) 
    if [ ! $? -eq 0 ]; then 
        echo "ERROR: cannot resolve $1" >&2 && exit 1
    fi
    echo $digresult | awk '{ print $5 }' 
   
}

_ip2host () {

    digresult=$( command dig +short -x $1 ) 
    if [ ! $? -eq 0 ]; then 
        echo "ERROR: cannot resolve $1" >&2 && exit 1
    fi
    echo $digresult
   
}


###
### Process Args
###
while [[ $# -gt 0 ]]; do
   case $1 in
       -h|--help)
           echo "$usage" && exit 0
           ;;
      *)
           if [[ -z "$orig" ]]; then
               orig=$1
           else 
              echo "ERROR: superfluous option $1" >&2 
              echo "$usage" && exit 1
           fi
           ;;
   esac
   shift
done

# This should work for 99.9% of the times I'll use it
if [[ $orig =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
   ipaddr=$orig
   dnshost=$( _ip2host $ipaddr )
   echo "$ipaddr -> $dnshost ->" $( _host2ip $dnshost ) 
else
  dnshost=$orig
  ipaddr=$( _host2ip $dnshost )
  echo "$dnshost -> $ipaddr ->" $( _ip2host $ipaddr ) 
fi

